library(twitteR)
library(httr)
# Carregando a biblioteca com funções de limpeza
source('utils.R')
# Mini-Projeto 1 - Análise de Sentimentos em Redes Sociais
# Obs: Caso tenha problemas com a acentuação, consulte este link:
# https://support.rstudio.com/hc/en-us/articles/200532197-Character-Encoding
# Configurando o diretório de trabalho
# Coloque entre aspas o diretório de trabalho que você está usando no seu computador
setwd("C:/FCD/BigDataRAzure/Cap17/Mini-Projeto01/")
getwd()
## Etapa 1 - Pacotes e Autenticação
# Instalando e Carregando o Pacote twitteR
install.packages("twitteR")
install.packages("httr")
library(twitteR)
library(httr)
# Carregando a biblioteca com funções de limpeza
source('utils.R')
# Chaves de autenticação no Twitter
key <- "MfIL2FUVVHPQmqhjGI9hm4bCA"
secret <- "txgAvXrg3HvMdhxGBrGIz5yqCOBVA5Vh6Lb3tIQqGn2v07OsCY"
token <- "902605855496994818-u3YlTOpqcjAplJJkK29ismudbrtVZXx"
tokensecret <- "d46QOh8wFltDVsWzFBmk7RBUJHQRx5G4PYyiSDcFBxpHh"
# Autenticação. Responda 1 quando perguntado sobre utilizar direct connection.
setup_twitter_oauth(key, secret, token, tokensecret)
library(tm)
library(SnowballC)
library(wordcloud)
library(e1071)
library(gmodels)
#install.packages('libcoin', dependencies = T)
#install.packages('C50', dependencies = T)
library(C50)
install.packages("C50")
#install.packages('libcoin', dependencies = T)
#install.packages('C50', dependencies = T)
library(C50)
install.packages("C50")
# Construindo um modelo
install.packages("mvtnorm")
#install.packages('libcoin', dependencies = T)
#install.packages('C50', dependencies = T)
library(C50)
install.packages("C50", repos="http://R-Forge.R-project.org")
library(C50)
# Carrega bibliotecas necessárias
library(dplyr)
library(gdata)
library(ggplot2)
# Aponta para o diretório onde estão os arquivos
setwd("~/analise-series-historicas-b3")
# Carrega funções que serão utilizadas no script
source("funcoes.R")
df <- ler_arquivo("COTAHIST_A2022.TXT")
# Faz a leitura das primeiras linhas do arquivo
head(df)
# Faz a conversão de campos data e valores
converter_campos(df)
# Resumo estatístico
summary(df$PREMAX)
# Empresas
total_registos_por_codigo <- table(df$CODNEG)
# Papéis por tipo de mercado
papeis_por_tipo <- unique(df[,c('TPMERC','CODNEG')])
table(papeis_por_tipo$TPMERC)
# Papéis por código BDI
papeis_por_bdi <- unique(df[,c('CODBDI','CODNEG')])
table(papeis_por_bdi$CODBDI)
qtde_bdi <- data.frame(table(papeis_por_bdi$CODBDI))
View(qtde_bdi)
View(qtde_bdi)
library(plotly)
library(quantmod)
dfCODNEG <- filter(df, trim(CODNEG) == COD)
fig <- dfCODNEG %>% plot_ly(x = ~DATAP, type="candlestick.R",
open = ~PREABE, close = ~PREULT,
high = ~PREMAX, low = ~PREMIN)
COD = 'ELET6'
dfCODNEG <- filter(df, trim(CODNEG) == COD)
fig <- dfCODNEG %>% plot_ly(x = ~DATAP, type="candlestick.R",
open = ~PREABE, close = ~PREULT,
high = ~PREMAX, low = ~PREMIN)
fig <- fig %>% layout(title = "Candlestick")
fig
fig <- dfCODNEG %>% plot_ly(x = ~DATAP, type="candlestick",
open = ~PREABE, close = ~PREULT,
high = ~PREMAX, low = ~PREMIN)
fig <- fig %>% layout(title = "Candlestick")
fig
View(dfCODNEG)
